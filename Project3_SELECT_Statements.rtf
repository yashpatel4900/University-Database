{\rtf1\ansi\ansicpg1252\cocoartf2757
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;\red89\green138\blue67;
\red193\green193\blue193;\red70\green137\blue204;\red202\green202\blue202;\red167\green197\blue152;\red194\green126\blue101;
}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c100000\c100000\c100000;\cssrgb\c41569\c60000\c33333;
\cssrgb\c80000\c80000\c80000;\cssrgb\c33725\c61176\c83922;\cssrgb\c83137\c83137\c83137;\cssrgb\c70980\c80784\c65882;\cssrgb\c80784\c56863\c47059;
}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
-- Granting Access to GRADERS\
\pard\pardeftab720\partightenfactor0
\cf2 GRANT EXECUTE ON SCHEMA::ypatel02 TO Graders;\
\pard\pardeftab720\partightenfactor0
\cf2 GRANT SELECT ON SCHEMA::ypatel02 TO Graders;\
\pard\pardeftab720\partightenfactor0
\cf2 \
-- VIEW      ypatel02.Benefits\
\pard\pardeftab720\partightenfactor0
\cf2 SELECT * FROM ypatel02.Benefits;\
\
\
\
\pard\pardeftab720\partightenfactor0
\cf2 -- 1st STORED PROCEDURES   UpdateSalaryWithJobLogic\
\
-- Before Updating\
\pard\pardeftab720\partightenfactor0
\cf2 SELECT ei.EmployeeId, u.DOB, ei.AnnualSalary, ej.JobId\
FROM ypatel02.EmployeeInfo ei\
INNER JOIN ypatel02.[User] u ON ei.EmployeeId = u.UserId\
INNER JOIN ypatel02.EmployeeJobs ej ON ei.EmployeeId = ej.EmployeeId;\
\
\pard\pardeftab720\partightenfactor0
\cf2 -- Executing Stored Procedure\
\pard\pardeftab720\partightenfactor0
\cf2 EXEC ypatel02.UpdateSalaryWithJobLogic;\
\
\pard\pardeftab720\partightenfactor0
\cf2 -- After \
\pard\pardeftab720\partightenfactor0
\cf2 SELECT ei.EmployeeId, u.DOB, ei.AnnualSalary, ej.JobId\
FROM ypatel02.EmployeeInfo ei\
INNER JOIN ypatel02.[User] u ON ei.EmployeeId = u.UserId\
INNER JOIN ypatel02.EmployeeJobs ej ON ei.EmployeeId = ej.EmployeeId;\
\
\
\
\
\
\pard\pardeftab720\partightenfactor0
\cf2 -- 2nd STORED PROCEDURE       UpdateEmployeeDataWithValidation @EmployeeId INT, @NewSalary DECIMAL(10, 2), @NewJobTitle NVARCHAR(50)\
\
-- Before\
\pard\pardeftab720\partightenfactor0
\cf2 SELECT\
    EI.EmployeeId,\
    EJ.JobId,\
    JI.JobTitle,\
    EI.AnnualSalary\
FROM\
    ypatel02.EmployeeInfo EI\
JOIN\
    ypatel02.EmployeeJobs EJ ON EI.EmployeeId = EJ.EmployeeId\
JOIN\
    ypatel02.JobInfo JI ON EJ.JobId = JI.JobId;\
\
\
\pard\pardeftab720\partightenfactor0
\cf2 -- Valid Update: Employee exists, positive salary, and valid job title\
\pard\pardeftab720\partightenfactor0
\cf2 EXEC UpdateEmployeeDataWithValidation\
    @EmployeeId = 27,\
    @NewSalary = 87000.00,\
    @NewJobTitle = 'Archivist';\
\
\pard\pardeftab720\partightenfactor0
\cf2 -- After\
\pard\pardeftab720\partightenfactor0
\cf2 SELECT\
    EI.EmployeeId,\
    EJ.JobId,\
    JI.JobTitle,\
    EI.AnnualSalary\
FROM\
    ypatel02.EmployeeInfo EI\
JOIN\
    ypatel02.EmployeeJobs EJ ON EI.EmployeeId = EJ.EmployeeId\
JOIN\
    ypatel02.JobInfo JI ON EJ.JobId = JI.JobId;\
\
\
\pard\pardeftab720\partightenfactor0
\cf2 -- Invalid Update: Employee does not exist\
\pard\pardeftab720\partightenfactor0
\cf2 EXEC UpdateEmployeeDataWithValidation\
    @EmployeeId = 999,\
    @NewSalary = 87000.00,\
    @NewJobTitle = 'Archivist';\
\
\pard\pardeftab720\partightenfactor0
\cf2 -- Invalid Update: Negative Salary\
\pard\pardeftab720\partightenfactor0
\cf2 EXEC UpdateEmployeeDataWithValidation\
    @EmployeeId = 27,\
    @NewSalary = -5000.00,\
    @NewJobTitle = 'Archivist';\
\
\pard\pardeftab720\partightenfactor0
\cf2 -- Invalid Update: Invalid Job Title\
\pard\pardeftab720\partightenfactor0
\cf2 EXEC UpdateEmployeeDataWithValidation\
    @EmployeeId = 27,\
    @NewSalary = 87000.00,\
    @NewJobTitle = 'InvalidJobTitle';\
\
\
\
\
\
\
\
\pard\pardeftab720\partightenfactor0
\cf2 -- 3rd STORED PROCEDURE        DeleteClassroom @ClassRoomIdToDelete INT\
\
-- Before\
\pard\pardeftab720\partightenfactor0
\cf2 SELECT\
    C.ClassRoomID,\
    B.BuildingID,\
    B.BuildingName,\
    B.NumberOfClasses AS NumberOfClassesInBuilding\
FROM\
    Classroom C\
JOIN\
    Buildings B ON C.BuildingId = B.BuildingID\
ORDER BY\
    C.ClassRoomId\
\
\pard\pardeftab720\partightenfactor0
\cf2 -- Execute \
\pard\pardeftab720\partightenfactor0
\cf2 EXEC ypatel02.DeleteClassroom @ClassRoomIdToDelete = 2;\
\
\pard\pardeftab720\partightenfactor0
\cf2 -- After\
\pard\pardeftab720\partightenfactor0
\cf2 SELECT BuildingId, NumberOfClasses\
FROM ypatel02.Buildings\
\
\
\
\
\
\
\
\pard\pardeftab720\partightenfactor0
\cf2 -- 4th STORED PROCEDURE      UpdateStudentStatusToGrad @StudentId INT\
\
--Before\
\pard\pardeftab720\partightenfactor0
\cf2 SELECT C.StudentId, C.CRN, C.EnrollmentStatusId, S.StudentStatusId, S.IsGraduate\
FROM CourseEnrollment C\
LEFT JOIN Student S ON C.StudentId = S.StudentId;\
\
\pard\pardeftab720\partightenfactor0
\cf2 -- Valid Execution\
\pard\pardeftab720\partightenfactor0
\cf2 EXEC UpdateStudentStatusToGrad 24;\
\
\pard\pardeftab720\partightenfactor0
\cf2 -- After\
\pard\pardeftab720\partightenfactor0
\cf2 SELECT C.StudentId, C.CRN, C.EnrollmentStatusId, S.StudentStatusId, S.IsGraduate\
FROM CourseEnrollment C\
LEFT JOIN Student S ON C.StudentId = S.StudentId;\
\
\pard\pardeftab720\partightenfactor0
\cf2 -- Invalid Execution (Student does not exist)\
\pard\pardeftab720\partightenfactor0
\cf2 EXEC UpdateStudentStatusToGrad 100;\
\
\pard\pardeftab720\partightenfactor0
\cf2 -- Invalid Execution (Some enrollments have EnrollmentStatusId <> 5) i.e. Student has Failed one or more subjects\
\pard\pardeftab720\partightenfactor0
\cf2 EXEC UpdateStudentStatusToGrad 28;\
\
\pard\pardeftab720\partightenfactor0
\cf2 -- Invalid Execution (Student is already in StudentStatusId = 3) i.e. Alread a Graduated Student\
\pard\pardeftab720\partightenfactor0
\cf2 EXEC UpdateStudentStatusToGrad 26;\
\
UPDATE Student\
SET StudentStatusId = 1, IsGraduate=0\
WHERE StudentId = 28;\
\
\
\
\
\
\
\
\
\pard\pardeftab720\partightenfactor0
\cf2 -- FUNCTION        ypatel02.FindAvailableClassrooms (@dayofweek NVARCHAR(50), @reqStartHour INT, @reqStartMin INT, @reqEndHour INT, @reqEndMin INT)\
\
-- Tables we should know \
\pard\pardeftab720\partightenfactor0
\cf2 SELECT * FROM ypatel02.CourseSchedule;\
SELECT * FROM ypatel02.CourseDailySchedule;\
\pard\pardeftab720\partightenfactor0
\cf2 -- Disctict Classrooms are 3,4,5,6,7,8,9,10 as classroom 1 and 2 are deleted\
\pard\pardeftab720\partightenfactor0
\cf2 SELECT DISTINCT ClassRoomId FROM Classroom;\
SELECT * FROM Classroom;\
\
\pard\pardeftab720\partightenfactor0
\cf2 -- Executing Function\
-- Checking when occupied by classroom 1 (9-10:30), 5(8-9:30)\
\pard\pardeftab720\partightenfactor0
\cf2 SELECT * FROM ypatel02.FindAvailableClassrooms(N'Monday', 9, 10, 10, 10);\
\pard\pardeftab720\partightenfactor0
\cf2 -- Checking when all clssrooms are free\
\pard\pardeftab720\partightenfactor0
\cf2 SELECT * FROM ypatel02.FindAvailableClassrooms(N'Monday', 14, 10, 15, 30);\
\pard\pardeftab720\partightenfactor0
\cf2 -- Checking when occupied by classroom 4 (15-16:30)\
\pard\pardeftab720\partightenfactor0
\cf2 SELECT * FROM ypatel02.FindAvailableClassrooms(N'Tuesday', 14, 10, 15, 15);\
\pard\pardeftab720\partightenfactor0
\cf2 -- Checking when all clssrooms are free\
\pard\pardeftab720\partightenfactor0
\cf2 SELECT * FROM ypatel02.FindAvailableClassrooms(N'Tuesday', 9, 10, 10, 10);\
}